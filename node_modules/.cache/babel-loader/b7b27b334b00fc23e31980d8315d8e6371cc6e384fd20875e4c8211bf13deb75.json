{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-new-app\\\\src\\\\CheckEmail.jsx\",\n  _s = $RefreshSig$();\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./newdesign.css\";\nimport { emailFunc } from \"./Backenddata\";\nimport { Formik } from \"formik\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CheckEmail() {\n  _s();\n  console.log(\"sdf\");\n  //   let navigate = useNavigate();\n  //   const changePathto = () => {\n  //     let path = \"./SendOtp\";\n  //     navigate(path);\n  //   };\n  //   return (\n  //     <>\n  //       <Formik\n  //         initialValues={{ email: \"\" }}\n  //         validate={(values) => {\n  //           const errors = {};\n  //           console.log();\n\n  //           if (!values.email) {\n  //             errors.email = \"fill the blanks\";\n  //           } else if (\n  //             values.email == \"/^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$/\"\n  //           ) {\n  //             errors.email = \"enter valid format\";\n  //           }\n\n  //           return errors;\n  //         }}\n  //         onSubmit={async (values, { setErrors, setSubmitting }) => {\n  //           console.log(\"shdb\");\n  //           try {\n  //             if (values.email) {\n  //               const response = await emailFunc(values.email);\n  //               if (response.status === 200) {\n  //                 console.log(response.data);\n  //                 changePathto();\n  //               }\n  //             }\n  //           } catch (error) {\n  //             if (error.status === 422) {\n  //               setErrors({ common: error.message });\n  //             }\n  //             console.log(error.message);\n\n  //             setSubmitting(false);\n  //           }\n  //         }}\n  //       >\n  //         {({\n  //           values,\n  //           handleSubmit,\n  //           isSubmitting,\n  //           verifyOtp,\n  //           /* and other goodies */\n  //         }) => (\n  //           <div>\n  //             <center>\n  //               <h2>Forgot Password</h2>\n  //               <form>\n  //                 <div class=\"checkEmail\">\n  //                   <input\n  //                     type=\"email\"\n  //                     name=\"email\"\n  //                     placeholder=\"Enter email..\"\n  //                   ></input>\n  //                   <br></br>\n  //                   <br></br>\n  //                   <Button type=\"submit\" id=\"emailbtn\" onClick={handleSubmit}>\n  //                     Verify Email\n  //                   </Button>\n  //                 </div>\n  //               </form>\n  //             </center>\n  //           </div>\n  //         )}\n  //       </Formik>\n  //     </>\n  //   );\n  // }\n\n  let navigate = useNavigate();\n  const changePathto = () => {\n    let path = \"./SendOtp\";\n    navigate(path);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"form\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: \"\"\n        },\n        validate: values => {\n          const errors = {};\n          console.log();\n          if (!values.email) {\n            errors.email = \"fill the blanks\";\n          } else if (values.email == \"/^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$/\") {\n            errors.email = \"enter valid format\";\n          }\n          return errors;\n        },\n        onSubmit: async (values, _ref) => {\n          let {\n            setErrors,\n            setSubmitting\n          } = _ref;\n          console.log(\"aduhb\");\n          try {\n            if (values.email) {\n              console.log(emailFunc(values.email));\n              const res = await emailFunc(values.email);\n              if (res.status === 200) {\n                console.log(\"valid email\");\n                //console.log(response.data);\n                //setData(\"authstate\", response.data);\n                changePathto();\n              }\n            }\n          } catch (error) {\n            console.log(\"error\", error);\n            setSubmitting(false);\n          }\n        },\n        children: _ref2 => {\n          let {\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            verifyOtp\n            /* and other goodies */\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              class: \"form-inline\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Forgot Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"signInForm\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  name: \"email\",\n                  placeholder: \"Enter your email..\",\n                  onChange: handleChange,\n                  onBlur: handleBlur,\n                  value: values.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 19\n                }, this), errors.email && touched.email && errors.email, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 67\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  class: \"btn btn-outline-info\",\n                  variant: \"primary\",\n                  type: \"submit\",\n                  value: \"Submit\",\n                  onClick: handleSubmit,\n                  children: \"Verify Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this), errors && errors.common && /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"error\",\n                  children: errors.common\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), \")\"]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(CheckEmail, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = CheckEmail;\nexport default CheckEmail;\nvar _c;\n$RefreshReg$(_c, \"CheckEmail\");","map":{"version":3,"names":["Button","emailFunc","Formik","useNavigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","CheckEmail","_s","console","log","navigate","changePathto","path","class","children","initialValues","email","validate","values","errors","onSubmit","_ref","setErrors","setSubmitting","res","status","error","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","verifyOtp","fileName","_jsxFileName","lineNumber","columnNumber","type","name","placeholder","onChange","onBlur","value","variant","onClick","common","_c","$RefreshReg$"],"sources":["D:/React/my-new-app/src/CheckEmail.jsx"],"sourcesContent":["import Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./newdesign.css\";\r\nimport { emailFunc } from \"./Backenddata\";\r\nimport { Formik } from \"formik\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nfunction CheckEmail() {\r\n  console.log(\"sdf\");\r\n  //   let navigate = useNavigate();\r\n  //   const changePathto = () => {\r\n  //     let path = \"./SendOtp\";\r\n  //     navigate(path);\r\n  //   };\r\n  //   return (\r\n  //     <>\r\n  //       <Formik\r\n  //         initialValues={{ email: \"\" }}\r\n  //         validate={(values) => {\r\n  //           const errors = {};\r\n  //           console.log();\r\n\r\n  //           if (!values.email) {\r\n  //             errors.email = \"fill the blanks\";\r\n  //           } else if (\r\n  //             values.email == \"/^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$/\"\r\n  //           ) {\r\n  //             errors.email = \"enter valid format\";\r\n  //           }\r\n\r\n  //           return errors;\r\n  //         }}\r\n  //         onSubmit={async (values, { setErrors, setSubmitting }) => {\r\n  //           console.log(\"shdb\");\r\n  //           try {\r\n  //             if (values.email) {\r\n  //               const response = await emailFunc(values.email);\r\n  //               if (response.status === 200) {\r\n  //                 console.log(response.data);\r\n  //                 changePathto();\r\n  //               }\r\n  //             }\r\n  //           } catch (error) {\r\n  //             if (error.status === 422) {\r\n  //               setErrors({ common: error.message });\r\n  //             }\r\n  //             console.log(error.message);\r\n\r\n  //             setSubmitting(false);\r\n  //           }\r\n  //         }}\r\n  //       >\r\n  //         {({\r\n  //           values,\r\n  //           handleSubmit,\r\n  //           isSubmitting,\r\n  //           verifyOtp,\r\n  //           /* and other goodies */\r\n  //         }) => (\r\n  //           <div>\r\n  //             <center>\r\n  //               <h2>Forgot Password</h2>\r\n  //               <form>\r\n  //                 <div class=\"checkEmail\">\r\n  //                   <input\r\n  //                     type=\"email\"\r\n  //                     name=\"email\"\r\n  //                     placeholder=\"Enter email..\"\r\n  //                   ></input>\r\n  //                   <br></br>\r\n  //                   <br></br>\r\n  //                   <Button type=\"submit\" id=\"emailbtn\" onClick={handleSubmit}>\r\n  //                     Verify Email\r\n  //                   </Button>\r\n  //                 </div>\r\n  //               </form>\r\n  //             </center>\r\n  //           </div>\r\n  //         )}\r\n  //       </Formik>\r\n  //     </>\r\n  //   );\r\n  // }\r\n\r\n  let navigate = useNavigate();\r\n  const changePathto = () => {\r\n    let path = \"./SendOtp\";\r\n    navigate(path);\r\n  };\r\n\r\n  return (\r\n    <div class=\"form\">\r\n      <>\r\n        <Formik\r\n          initialValues={{ email: \"\" }}\r\n          validate={(values) => {\r\n            const errors = {};\r\n            console.log();\r\n\r\n            if (!values.email) {\r\n              errors.email = \"fill the blanks\";\r\n            } else if (\r\n              values.email == \"/^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$/\"\r\n            ) {\r\n              errors.email = \"enter valid format\";\r\n            }\r\n\r\n            return errors;\r\n          }}\r\n          onSubmit={async (values, { setErrors, setSubmitting }) => {\r\n            console.log(\"aduhb\");\r\n            try {\r\n              if (values.email) {\r\n                console.log(emailFunc(values.email));\r\n                const res = await emailFunc(values.email);\r\n\r\n                if (res.status === 200) {\r\n                  console.log(\"valid email\");\r\n                  //console.log(response.data);\r\n                  //setData(\"authstate\", response.data);\r\n                  changePathto();\r\n                }\r\n              }\r\n            } catch (error) {\r\n              console.log(\"error\", error);\r\n\r\n              setSubmitting(false);\r\n            }\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            verifyOtp,\r\n            /* and other goodies */\r\n          }) => (\r\n            <div class=\"form-group\">\r\n              <form class=\"form-inline\">\r\n                <h2>Forgot Password</h2>\r\n                <div class=\"signInForm\">\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Enter your email..\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                  />\r\n                  <br></br>\r\n                  {errors.email && touched.email && errors.email} <br></br>\r\n                  <Button\r\n                    class=\"btn btn-outline-info\"\r\n                    variant=\"primary\"\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Verify Email\r\n                  </Button>\r\n                  {errors && errors.common && (\r\n                    <span class=\"error\">{errors.common}</span>\r\n                  )}\r\n                </div>\r\n              </form>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n        )\r\n      </>\r\n    </div>\r\n  );\r\n}\r\nexport default CheckEmail;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}